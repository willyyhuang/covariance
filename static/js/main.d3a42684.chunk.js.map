{"version":3,"sources":["images/avatar.png","views/Overview/Overview.tsx","views/ProjectDetail/ProjectDetail.tsx","views/ProjectDocumentation/ProjectDocumentation.tsx","App.tsx","index.tsx"],"names":["OverView","useStyles","makeStyles","theme","root","display","margin","spacing","large","width","height","projects","projectList","classes","Card","style","Grid","container","item","xs","md","lg","Avatar","className","src","UserAvatar","Autocomplete","id","options","title","getOptionLabel","option","val","lodash","isString","renderInput","params","TextField","label","variant","size","marginBottom","CardActions","Add","Settings","ExitToApp","CardContent","map","value","Accordion","AccordionSummary","Typography","name","AccordionDetails","detail","Button","href","displayName","StyledCardActionArea","styled","CardActionArea","StyledRightIcon","ChevronRight","StyledListIcon","ListIcon","StyledButton","ProjectDetail","projectFilesTitle","getTypeIcon","type","icon","PictureAsPdf","DeveloperBoard","Code","Layers","Folder","padding","CardHeader","projectDetail","IconButton","Home","Delete","description","textDecoration","color","select","version","MenuItem","startIcon","Label","Publish","List","files","ListItem","ListItemAvatar","ListItemText","primary","secondary","ListItemSecondaryAction","edge","Restore","Edit","ProjectDocumentation","config","regex","fn","key","result","target","rel","ArrowBack","AddCircleOutline","fontSize","projectDocuments","documents","action","marginTop","whiteSpace","processString","body","App","basename","process","exact","path","component","Overview","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a42684.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.72ef8f65.png\";","import React from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Avatar,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {Add, ExitToApp, Settings} from '@material-ui/icons'\nimport lodash from 'lodash'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport UserAvatar from '../../images/avatar.png'\nimport projectList from '../../mock/projectList.json'\n\nconst OverView = () => {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    large: {\n      width: theme.spacing(14),\n      height: theme.spacing(14),\n    },\n  }))\n  const {projects} = projectList\n  const classes = useStyles()\n  const options = [\n    {title: 'Hyperledger'},\n    {title: 'E-vent'},\n    {title: 'FarmBot'},\n    {title: 'Upspin'},\n    {title: 'AdaNet'},\n  ]\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      {/* Create Main Profile Card */}\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={1} md={1} lg={1} />\n        <Grid item xs={2} md={2} lg={2}>\n          <Avatar className={classes.large} src={UserAvatar} />\n        </Grid>\n        <Grid item xs={8} md={8} lg={8}>\n          <Autocomplete\n            id='project-discovery'\n            options={options}\n            getOptionLabel={(option: any) => {\n              const val = option.title\n              return lodash.isString(val) ? val : ''\n            }}\n            style={{width: '100%'}}\n            renderInput={(params: any) => (\n              <TextField\n                {...params}\n                id='outlined-basic'\n                label='Project discovery'\n                variant='outlined'\n                size='small'\n                style={{marginBottom: 16, width: '100%'}}\n              />\n            )}\n          />\n          <Card>\n            <CardActions>\n              <Add />\n              <Settings />\n              <ExitToApp />\n            </CardActions>\n            <CardContent>\n              I am a young and aspiring engineering student with an insatiable\n              need to create, tinker, learn, and explore what is really possible\n              with the power of software (and it&apos;s marriage to hardware). I\n              try and bring a high level of positivity and morale to teammates;\n              helping people and fixing problems are where I excel.\n            </CardContent>\n          </Card>\n          {/* Iterate over list of projects, create expanding accordion with tile and project description */}\n          {projects.map((value) => (\n            <Accordion style={{margin: '16px 0px 16px 0px'}}>\n              <AccordionSummary>\n                <Typography>{value.name}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography>{value.detail}</Typography>\n                <Button variant='outlined' href={`#/Project/${value.id}`}>\n                  Open\n                </Button>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </Grid>\n        <Grid item xs={1} md={1} lg={1} />\n      </Grid>\n    </Card>\n  )\n}\n\nOverView.displayName = 'OverView'\nexport default OverView\n","import React from 'react'\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  CardActionArea,\n  CardHeader,\n  Grid,\n  MenuItem,\n  TextField,\n  Typography,\n  List,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n} from '@material-ui/core'\nimport {\n  Add,\n  Delete,\n  Settings,\n  ChevronRight,\n  Edit,\n  Folder,\n  Label,\n  List as ListIcon,\n  PictureAsPdf,\n  Publish,\n  Restore,\n  DeveloperBoard,\n  Code,\n  Layers,\n  Home,\n} from '@material-ui/icons'\nimport styled from 'styled-components'\nimport projectDetail from '../../mock/projectDetail.json'\n\nconst StyledCardActionArea = styled(CardActionArea)`\n  text-align: right;\n  padding: 8px;\n`\n\nconst StyledRightIcon = styled(ChevronRight)`\n  vertical-align: -10px;\n`\n\nconst StyledListIcon = styled(ListIcon)`\n  vertical-align: -6px;\n`\n\nconst StyledButton = styled(Button)`\n  height: 55px;\n`\n// Build the project description using a Typography component for fancier display\nconst ProjectDetail = () => {\n  const projectFilesTitle = (\n    <Typography>\n      <StyledListIcon />\n      Project files\n    </Typography>\n  )\n\n  // Build the project title using a Typography component for fancier display\n  const getProjectTitle = (name: any) => (\n    <Typography>\n      {name}\n      <IconButton href='#/'>\n        <Home />\n      </IconButton>\n    </Typography>\n  )\n\n  // Switch statement for translating type to an actual component\n  const getTypeIcon = (type: string) => {\n    let icon\n    switch (type) {\n      case 'PDF':\n        icon = <PictureAsPdf />\n        break\n      case 'Gerber':\n        icon = <DeveloperBoard />\n        break\n      case 'Code':\n        icon = <Code />\n        break\n      case 'CAD':\n        icon = <Layers />\n        break\n      default:\n        icon = <Folder />\n    }\n    return icon\n  }\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      <Card style={{padding: 16}}>\n        <CardHeader title={getProjectTitle(projectDetail.name)} />\n        <CardActions>\n          <Add />\n          <Delete />\n          <Settings />\n        </CardActions>\n        <CardContent>{projectDetail.description}</CardContent>\n        <StyledCardActionArea>\n          <Button\n            href='#/Documentation'\n            style={{textDecoration: 'none', color: '#3366bb'}}>\n            Documentation\n            <StyledRightIcon />\n          </Button>\n        </StyledCardActionArea>\n      </Card>\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={1} md={1} lg={1} />\n        <Grid item xs={3} md={3} lg={3}>\n          <TextField\n            style={{width: '80%'}}\n            id='tag-version'\n            select\n            label='Select'\n            variant='outlined'>\n            {/* Iterate over all the versions in the array and print them as options 1 by 1 */}\n            {projectDetail.version.map((version) => (\n              <MenuItem value={version}>{version}</MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n        <Grid item xs={2} md={2} lg={2} />\n        <Grid item xs={3} md={3} lg={3}>\n          <StyledButton variant='outlined' startIcon={<Label />}>\n            Tag New Version\n          </StyledButton>\n        </Grid>\n        <Grid item xs={2} md={2} lg={2}>\n          <StyledButton variant='outlined' startIcon={<Publish />}>\n            Upload\n          </StyledButton>\n        </Grid>\n        <Grid item xs={1} md={1} lg={1} />\n      </Grid>\n      <Card>\n        <CardHeader title={projectFilesTitle} />\n        <CardContent>\n          <List>\n            {/* Iterate over all files listed as being part of this project and render them with appropriate icons */}\n            {projectDetail.files.map((item) => (\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>{getTypeIcon(item.type)}</Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={item.name}\n                  secondary={item.description}\n                />\n                <ListItemSecondaryAction>\n                  <IconButton edge='end'>\n                    <Restore />\n                  </IconButton>\n                  <IconButton edge='end'>\n                    <Edit />\n                  </IconButton>\n                  <IconButton edge='end'>\n                    <Delete />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </Card>\n  )\n}\n\nProjectDetail.displayName = 'ProjectDetail'\nexport default ProjectDetail\n","import React from 'react'\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  IconButton,\n  Typography,\n} from '@material-ui/core'\nimport {AddCircleOutline, ArrowBack} from '@material-ui/icons'\nimport processString from 'react-process-string'\nimport projectDocuments from '../../mock/projectDocumentation.json'\n\nconst ProjectDocumentation = () => {\n  // use processString to transform links in paragraph to hyperlink while maintaining the rest as normal text\n  const config = [\n    {\n      regex: /(http|https):\\/\\/(\\S+)\\.([a-z]{2,}?)(.*?)( |\\,|$|\\.)/gim,\n      fn: (key: any, result: any) => (\n        <span key={key}>\n          <a\n            target='_blank'\n            href={`${result[1]}://${result[2]}.${result[3]}${result[4]}`}\n            rel='noreferrer'>\n            {result[2]}.{result[3]}\n            {result[4]}\n          </a>\n          {result[5]}\n        </span>\n      ),\n    },\n    {\n      regex: /(\\S+)\\.([a-z]{2,}?)(.*?)( |\\,|$|\\.)/gim,\n      fn: (key: any, result: any) => (\n        <span key={key}>\n          <a\n            target='_blank'\n            href={`http://${result[1]}.${result[2]}${result[3]}`}\n            rel='noreferrer'>\n            {result[1]}.{result[2]}\n            {result[3]}\n          </a>\n          {result[4]}\n        </span>\n      ),\n    },\n  ]\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={4} md={4} lg={4}>\n          <Button\n            style={{margin: '14px 0px 0px 16px'}}\n            href='#/Project/1'\n            variant='outlined'\n            color='primary'>\n            <ArrowBack />\n            Back to Project\n          </Button>\n        </Grid>\n        <Grid item xs={7} md={7} lg={7} />\n        <Grid item xs={1} md={1} lg={1}>\n          <IconButton>\n            <AddCircleOutline fontSize='large' />\n          </IconButton>\n        </Grid>\n      </Grid>\n      {projectDocuments.documents.map((item) => (\n        <Card style={{padding: 16, margin: '16px 0px 16px 0px'}}>\n          <CardHeader\n            title={item.title}\n            action={\n              <Typography style={{color: '#3366bb', marginTop: 8}}>\n                Edit\n              </Typography>\n            }\n          />\n          <CardContent>\n            <Typography variant='body1' style={{whiteSpace: 'pre-line'}}>\n              {processString(config)(item.body)}\n            </Typography>\n          </CardContent>\n        </Card>\n      ))}\n    </Card>\n  )\n}\n\nProjectDocumentation.displayName = 'ProjectDocumentation'\nexport default ProjectDocumentation\n","import {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport React from 'react'\nimport {Overview, ProjectDetail, ProjectDocumentation} from './views'\n\n// Front-end of the application, first introduce router system, in this case we are using hashRouter so that when it is hosted on gh-pages, the routing system works.\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path='/' component={Overview} />\n      <Route path='/Project/:id' component={ProjectDetail} />\n      <Route path='/Documentation' component={ProjectDocumentation} />\n    </Switch>\n  </Router>\n)\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'fontsource-roboto'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}