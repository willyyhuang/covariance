{"version":3,"sources":["images/avatar.png","views/Overview/Overview.tsx","views/ProjectDetail/ProjectDetail.tsx","views/ProjectDocumentation/ProjectDocumentation.tsx","App.tsx","index.tsx"],"names":["OverView","useStyles","makeStyles","theme","root","display","margin","spacing","large","width","height","projects","projectList","classes","Card","style","Grid","container","item","xs","md","lg","Avatar","className","src","UserAvatar","CardActions","Add","Settings","ExitToApp","CardContent","map","value","Accordion","AccordionSummary","Typography","name","AccordionDetails","detail","Button","variant","href","id","displayName","StyledCardActionArea","styled","CardActionArea","StyledRightIcon","ChevronRight","StyledListIcon","ListIcon","StyledButton","ProjectDetail","projectFilesTitle","getTypeIcon","type","icon","PictureAsPdf","DeveloperBoard","Code","Layers","Folder","padding","CardHeader","title","projectDetail","IconButton","Home","Delete","description","textDecoration","color","TextField","select","label","version","MenuItem","startIcon","Label","Publish","List","files","ListItem","ListItemAvatar","ListItemText","primary","secondary","ListItemSecondaryAction","edge","Restore","Edit","ProjectDocumentation","config","regex","fn","key","result","target","rel","ArrowBack","AddCircleOutline","fontSize","projectDocuments","documents","action","marginTop","whiteSpace","processString","body","App","basename","process","exact","path","component","Overview","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1496a7cb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/avatar.72ef8f65.png\";","import React from 'react'\nimport {\n  Accordion,\n  AccordionDetails,\n  AccordionSummary,\n  Avatar,\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  Grid,\n  Typography,\n} from '@material-ui/core'\nimport {makeStyles} from '@material-ui/core/styles'\nimport {Add, ExitToApp, Settings} from '@material-ui/icons'\nimport UserAvatar from '../../images/avatar.png'\nimport projectList from '../../mock/projectList.json'\n\nconst OverView = () => {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      display: 'flex',\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    large: {\n      width: theme.spacing(14),\n      height: theme.spacing(14),\n    },\n  }))\n  const {projects} = projectList\n  const classes = useStyles()\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      {/* Create Main Profile Card */}\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={1} md={1} lg={1} />\n        <Grid item xs={2} md={2} lg={2}>\n          <Avatar className={classes.large} src={UserAvatar} />\n        </Grid>\n        <Grid item xs={8} md={8} lg={8}>\n          <Card>\n            <CardActions>\n              <Add />\n              <Settings />\n              <ExitToApp />\n            </CardActions>\n            <CardContent>\n              I am a young and aspiring engineering student with an insatiable need to create, tinker, learn,\n              and explore what is really possible with the power of software (and it&apos;s marriage to hardware).\n              I try and bring a high level of positivity and morale to teammates; helping people and fixing problems are where I excel.\n            </CardContent>\n          </Card>\n          {/* Iterate over list of projects, create expanding accordion with tile and project description */}\n          {projects.map((value) => (\n            <Accordion style={{margin: '16px 0px 16px 0px'}}>\n              <AccordionSummary>\n                <Typography>{value.name}</Typography>\n              </AccordionSummary>\n              <AccordionDetails>\n                <Typography>{value.detail}</Typography>\n                <Button variant='outlined' href={`#/Project/${value.id}`}>\n                  Open\n                </Button>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </Grid>\n        <Grid item xs={1} md={1} lg={1} />\n      </Grid>\n    </Card>\n  )\n}\n\nOverView.displayName = 'OverView'\nexport default OverView\n","import React from 'react'\nimport {\n  Avatar,\n  Button,\n  Card,\n  CardContent,\n  CardActions,\n  CardActionArea,\n  CardHeader,\n  Grid,\n  MenuItem,\n  TextField,\n  Typography,\n  List,\n  ListItemAvatar,\n  ListItem,\n  ListItemText,\n  ListItemSecondaryAction,\n  IconButton,\n} from '@material-ui/core'\nimport {\n  Add,\n  Delete,\n  Settings,\n  ChevronRight,\n  Edit,\n  Folder,\n  Label,\n  List as ListIcon,\n  PictureAsPdf,\n  Publish,\n  Restore,\n  DeveloperBoard,\n  Code,\n  Layers,\n  Home,\n} from '@material-ui/icons'\nimport styled from 'styled-components'\nimport projectDetail from '../../mock/projectDetail.json'\n\nconst StyledCardActionArea = styled(CardActionArea)`\n  text-align: right;\n  padding: 8px;\n`\n\nconst StyledRightIcon = styled(ChevronRight)`\n  vertical-align: -10px;\n`\n\nconst StyledListIcon = styled(ListIcon)`\n  vertical-align: -6px;\n`\n\nconst StyledButton = styled(Button)`\n  height: 55px;\n`\n// Build the project description using a Typography component for fancier display\nconst ProjectDetail = () => {\n  const projectFilesTitle = (\n    <Typography>\n      <StyledListIcon />\n      Project files\n    </Typography>\n  )\n\n  // Build the project title using a Typography component for fancier display\n  const getProjectTitle = (name: any) => (\n    <Typography>\n      {name}\n      <IconButton href='#/'>\n        <Home />\n      </IconButton>\n    </Typography>\n  )\n\n  // Switch statement for translating type to an actual component\n  const getTypeIcon = (type: string) => {\n    let icon\n    switch (type) {\n      case 'PDF':\n        icon = <PictureAsPdf />\n        break\n      case 'Gerber':\n        icon = <DeveloperBoard />\n        break\n      case 'Code':\n        icon = <Code />\n        break\n      case 'CAD':\n        icon = <Layers />\n        break\n      default:\n        icon = <Folder />\n    }\n    return icon\n  }\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      <Card style={{padding: 16}}>\n        <CardHeader title={getProjectTitle(projectDetail.name)} />\n        <CardActions>\n          <Add />\n          <Delete />\n          <Settings />\n        </CardActions>\n        <CardContent>{projectDetail.description}</CardContent>\n        <StyledCardActionArea>\n          <Button\n            href='#/Documentation'\n            style={{textDecoration: 'none', color: '#3366bb'}}>\n            Documentation\n            <StyledRightIcon />\n          </Button>\n        </StyledCardActionArea>\n      </Card>\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={1} md={1} lg={1} />\n        <Grid item xs={3} md={3} lg={3}>\n          <TextField\n            style={{width: '80%'}}\n            id='tag-version'\n            select\n            label='Select'\n            variant='outlined'>\n            {/* Iterate over all the versions in the array and print them as options 1 by 1 */}\n            {projectDetail.version.map((version) => (\n              <MenuItem value={version}>{version}</MenuItem>\n            ))}\n          </TextField>\n        </Grid>\n        <Grid item xs={2} md={2} lg={2} />\n        <Grid item xs={3} md={3} lg={3}>\n          <StyledButton variant='outlined' startIcon={<Label />}>\n            Tag New Version\n          </StyledButton>\n        </Grid>\n        <Grid item xs={2} md={2} lg={2}>\n          <StyledButton variant='outlined' startIcon={<Publish />}>\n            Upload\n          </StyledButton>\n        </Grid>\n        <Grid item xs={1} md={1} lg={1} />\n      </Grid>\n      <Card>\n        <CardHeader title={projectFilesTitle} />\n        <CardContent>\n          <List>\n            {/* Iterate over all files listed as being part of this project and render them with appropriate icons */}\n            {projectDetail.files.map((item) => (\n              <ListItem>\n                <ListItemAvatar>\n                  <Avatar>{getTypeIcon(item.type)}</Avatar>\n                </ListItemAvatar>\n                <ListItemText\n                  primary={item.name}\n                  secondary={item.description}\n                />\n                <ListItemSecondaryAction>\n                  <IconButton edge='end'>\n                    <Restore />\n                  </IconButton>\n                  <IconButton edge='end'>\n                    <Edit />\n                  </IconButton>\n                  <IconButton edge='end'>\n                    <Delete />\n                  </IconButton>\n                </ListItemSecondaryAction>\n              </ListItem>\n            ))}\n          </List>\n        </CardContent>\n      </Card>\n    </Card>\n  )\n}\n\nProjectDetail.displayName = 'ProjectDetail'\nexport default ProjectDetail\n","import React from 'react'\nimport {\n  Button,\n  Card,\n  CardContent,\n  CardHeader,\n  Grid,\n  IconButton,\n  Typography,\n} from '@material-ui/core'\nimport {AddCircleOutline, ArrowBack} from '@material-ui/icons'\nimport processString from 'react-process-string'\nimport projectDocuments from '../../mock/projectDocumentation.json'\n\nconst ProjectDocumentation = () => {\n  const config = [\n    {\n      regex: /(http|https):\\/\\/(\\S+)\\.([a-z]{2,}?)(.*?)( |\\,|$|\\.)/gim,\n      fn: (key: any, result: any) => (\n        <span key={key}>\n          <a\n            target='_blank'\n            href={`${result[1]}://${result[2]}.${result[3]}${result[4]}`}\n            rel='noreferrer'>\n            {result[2]}.{result[3]}\n            {result[4]}\n          </a>\n          {result[5]}\n        </span>\n      ),\n    },\n    {\n      regex: /(\\S+)\\.([a-z]{2,}?)(.*?)( |\\,|$|\\.)/gim,\n      fn: (key: any, result: any) => (\n        <span key={key}>\n          <a\n            target='_blank'\n            href={`http://${result[1]}.${result[2]}${result[3]}`}\n            rel='noreferrer'>\n            {result[1]}.{result[2]}\n            {result[3]}\n          </a>\n          {result[4]}\n        </span>\n      ),\n    },\n  ]\n\n  return (\n    <Card style={{margin: '20vh 20vw 20vh 20vw'}}>\n      <Grid container style={{margin: '16px 0px 16px 0px'}}>\n        <Grid item xs={4} md={4} lg={4}>\n          <Button\n            style={{margin: '14px 0px 0px 16px'}}\n            href='#/Project/1'\n            variant='outlined'\n            color='primary'>\n            <ArrowBack />\n            Back to Project\n          </Button>\n        </Grid>\n        <Grid item xs={7} md={7} lg={7} />\n        <Grid item xs={1} md={1} lg={1}>\n          <IconButton>\n            <AddCircleOutline fontSize='large' />\n          </IconButton>\n        </Grid>\n      </Grid>\n      {projectDocuments.documents.map((item) => (\n        <Card style={{padding: 16, margin: '16px 0px 16px 0px'}}>\n          <CardHeader\n            title={item.title}\n            action={\n              <Typography style={{color: '#3366bb', marginTop: 8}}>\n                Edit\n              </Typography>\n            }\n          />\n          <CardContent>\n            <Typography variant='body1' style={{whiteSpace: 'pre-line'}}>\n              {processString(config)(item.body)}\n            </Typography>\n          </CardContent>\n        </Card>\n      ))}\n    </Card>\n  )\n}\n\nProjectDocumentation.displayName = 'ProjectDocumentation'\nexport default ProjectDocumentation\n","import {HashRouter as Router, Route, Switch} from 'react-router-dom'\nimport React from 'react'\nimport {Overview, ProjectDetail, ProjectDocumentation} from './views'\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route exact path='/' component={Overview} />\n      <Route path='/Project/:id' component={ProjectDetail} />\n      <Route path='/Documentation' component={ProjectDocumentation} />\n    </Switch>\n  </Router>\n)\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'fontsource-roboto'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n"],"sourceRoot":""}